[{"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\index.tsx":"1","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\reportWebVitals.ts":"2","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\redux\\store.ts":"3","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\App.tsx":"4","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\routers\\index.tsx":"5","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\HomePage.tsx":"6","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\layouts\\Navbar.tsx":"7","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\layouts\\Footter.tsx":"8","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\common\\Error.tsx":"9","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\styles\\theme.ts":"10","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\common\\StickyFotter.tsx":"11","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\LoginPage.tsx":"12","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\RegistrationPage.tsx":"13","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\customers\\customersThunk.ts":"14","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\redux\\hooks.ts":"15","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\customers\\customersSlice.ts":"16","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\common\\Loading.tsx":"17","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\customers\\AccountActivation.tsx":"18","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\AccountPage.tsx":"19","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\ForgotPasswordPage.tsx":"20","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\customers\\ResetPassowrdActivation.tsx":"21","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\ResetPasswordPage.tsx":"22","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\EditAccountPage.tsx":"23","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\products\\ProductsPage.tsx":"24","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\layouts\\Sidebar.tsx":"25","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\products\\productsSlice.ts":"26","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\products\\productsThunk.ts":"27","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\products\\ProductCardItem.tsx":"28","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\products\\ProductListItem.tsx":"29","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\brands\\brandSlice.ts":"30","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\brands\\brandThunk.ts":"31","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\categories\\categorySlice.ts":"32","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\categories\\categoryThunk.ts":"33","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\common\\NoProductsFound.tsx":"34","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\layouts\\SearchAndCartBar.tsx":"35","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\products\\ProductDetailsPage.tsx":"36","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\products\\ProductSerchListItem.tsx":"37","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\routers\\LoginRoute.tsx":"38","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\routers\\AdminRoute.tsx":"39","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\admin\\AdminSidebar.tsx":"40","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\admin\\AdminProductListItem.tsx":"41","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\adminDashbord\\AdminProductPage.tsx":"42","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\adminDashbord\\AdminCustomerPage.tsx":"43","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\adminDashbord\\AdminOrdersPage.tsx":"44","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\adminDashbord\\AdminProductCreatePage.tsx":"45"},{"size":812,"mtime":1683232788313,"results":"46","hashOfConfig":"47"},{"size":440,"mtime":1683052593197,"results":"48","hashOfConfig":"47"},{"size":783,"mtime":1683923791925,"results":"49","hashOfConfig":"47"},{"size":507,"mtime":1683308554537,"results":"50","hashOfConfig":"47"},{"size":5092,"mtime":1684174398428,"results":"51","hashOfConfig":"47"},{"size":5461,"mtime":1684101184138,"results":"52","hashOfConfig":"47"},{"size":6153,"mtime":1684138695233,"results":"53","hashOfConfig":"47"},{"size":3846,"mtime":1683121685683,"results":"54","hashOfConfig":"47"},{"size":1171,"mtime":1683058215099,"results":"55","hashOfConfig":"47"},{"size":650,"mtime":1683121729450,"results":"56","hashOfConfig":"47"},{"size":2256,"mtime":1683103286653,"results":"57","hashOfConfig":"47"},{"size":5652,"mtime":1684091533324,"results":"58","hashOfConfig":"47"},{"size":9400,"mtime":1684176938451,"results":"59","hashOfConfig":"47"},{"size":10465,"mtime":1684097650385,"results":"60","hashOfConfig":"47"},{"size":360,"mtime":1683052593196,"results":"61","hashOfConfig":"47"},{"size":10164,"mtime":1684098172670,"results":"62","hashOfConfig":"47"},{"size":734,"mtime":1683058228217,"results":"63","hashOfConfig":"47"},{"size":3772,"mtime":1684093670748,"results":"64","hashOfConfig":"47"},{"size":10194,"mtime":1684142964167,"results":"65","hashOfConfig":"47"},{"size":3397,"mtime":1683402338743,"results":"66","hashOfConfig":"47"},{"size":4258,"mtime":1683407258328,"results":"67","hashOfConfig":"47"},{"size":5735,"mtime":1683483742047,"results":"68","hashOfConfig":"47"},{"size":14256,"mtime":1683550204415,"results":"69","hashOfConfig":"47"},{"size":9518,"mtime":1684139696478,"results":"70","hashOfConfig":"47"},{"size":11359,"mtime":1684004187743,"results":"71","hashOfConfig":"47"},{"size":6436,"mtime":1684086197101,"results":"72","hashOfConfig":"47"},{"size":4701,"mtime":1684090683523,"results":"73","hashOfConfig":"47"},{"size":3609,"mtime":1684063812162,"results":"74","hashOfConfig":"47"},{"size":4341,"mtime":1684063860961,"results":"75","hashOfConfig":"47"},{"size":1711,"mtime":1683916307106,"results":"76","hashOfConfig":"47"},{"size":1114,"mtime":1683923503874,"results":"77","hashOfConfig":"47"},{"size":1774,"mtime":1684000574308,"results":"78","hashOfConfig":"47"},{"size":1207,"mtime":1683923548320,"results":"79","hashOfConfig":"47"},{"size":1190,"mtime":1683998533719,"results":"80","hashOfConfig":"47"},{"size":5198,"mtime":1684090831131,"results":"81","hashOfConfig":"47"},{"size":4284,"mtime":1684063510200,"results":"82","hashOfConfig":"47"},{"size":1842,"mtime":1684090742443,"results":"83","hashOfConfig":"47"},{"size":733,"mtime":1684092979754,"results":"84","hashOfConfig":"47"},{"size":716,"mtime":1684094676903,"results":"85","hashOfConfig":"47"},{"size":7047,"mtime":1684174445788,"results":"86","hashOfConfig":"47"},{"size":5803,"mtime":1684165179191,"results":"87","hashOfConfig":"47"},{"size":7306,"mtime":1684171809157,"results":"88","hashOfConfig":"47"},{"size":144,"mtime":1684172041818,"results":"89","hashOfConfig":"47"},{"size":142,"mtime":1684172108944,"results":"90","hashOfConfig":"47"},{"size":11608,"mtime":1684183515933,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"13nasui",{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"95"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"95"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"95"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"95"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"95"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"95"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"95"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\index.tsx",[],[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\reportWebVitals.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\redux\\store.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\App.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\routers\\index.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\HomePage.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\layouts\\Navbar.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\layouts\\Footter.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\common\\Error.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\styles\\theme.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\common\\StickyFotter.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\LoginPage.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\RegistrationPage.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\customers\\customersThunk.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\redux\\hooks.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\customers\\customersSlice.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\common\\Loading.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\customers\\AccountActivation.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\AccountPage.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\ForgotPasswordPage.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\customers\\ResetPassowrdActivation.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\ResetPasswordPage.tsx",["235","236","237","238","239"],[],"//The ResetPasswordPage component allows users to reset their password. It uses the useLocation hook to access the email address passed from the previous page, checks if the provided passwords match, and dispatches the setNewPassword action from the authThanks feature. If the password reset is successful, the user is redirected to the login page. The component uses Material-UI components for the UI and displays loading, error, and success messages as necessary.\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n// The useLocation hook returns an object representing the current location (i.e., the current route and its associated information). Needed to get data psed by useNavigaion hook\r\nimport { useLocation } from \"react-router\";\r\n\r\n// MUI components imports\r\nimport {\r\n    Container,\r\n    Typography,\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Alert,\r\n} from \"@mui/material\";\r\n\r\n// Other component import\r\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\r\nimport { setNewPassword } from \"../../features/customers/customersThunk\";\r\n\r\nconst ResetPasswordPage: React.FC = () => {\r\n    // Initialize hooks\r\n    const navigate = useNavigate();\r\n    const dispatch = useAppDispatch();\r\n    //Use the useLocation hook to get the current location.The location object has a state property, which contains the data passed during navigation.\r\n    const location = useLocation();\r\n\r\n    // 1. Set component state\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    // 2. Assign value to the variable from the location object, which has the state property received by using navigate from ResetPasswordActivation. Inside this property, we have a key \"email\" and its value. Use \"?\" to handle TypeScript's undefined case (If the state object is undefined, emailFromState will have an empty string as its value).\r\n    const emailFromState = location.state?.email || \"\";\r\n\r\n    // 3. Get loading, error, and message states from Redux store\r\n    const { loading, error, success } = useAppSelector(\r\n        (state) => state.customerR\r\n    );\r\n\r\n    // 4. Prepare data to be sent to the backend\r\n    const resetPasswordData = {\r\n        email: emailFromState,\r\n        password: password,\r\n    };\r\n\r\n    // 6. Send data to the authThunk to be sent next to the backend as a post request\r\n    const handleSubmit = (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        //  Check first if passwords match. If not, save the message to the state to be shown to the user and stop the execution.\r\n        if (password !== passwordConfirm) {\r\n            setErrorMessage(\"Passwords do not match\");\r\n            return;\r\n        }\r\n        // If passwords match each other, dispatch the new password and email to the thunk\r\n        dispatch(setNewPassword(resetPasswordData));\r\n    };\r\n    // 6. Redirect the user in case of success to the login page. Using useEffect instead of conditional rendering in this case is to have more control over side effects like navigation. Since navigation is a side effect, it's a good practice to handle it inside a useEffect.\r\n    // useEffect(() => {\r\n    //     if (success) {\r\n    //         // Reset the error and message in state before navigating\r\n    //         setTimeout(() => {\r\n    //             navigate(\"/login\");\r\n    //         }, 3000);\r\n    //     }\r\n    // }, [loading, error, message, navigate, dispatch]);\r\n\r\n    // Input actions handelers\r\n    const handlePasswordChange = (\r\n        event: React.ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        setPassword(event.target.value);\r\n    };\r\n\r\n    const handlePasswordConfirmChange = (\r\n        event: React.ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        setPasswordConfirm(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <Box sx={{ mt: 8 }}>\r\n                <Typography variant='h4' align='center'>\r\n                    Set A New Password\r\n                </Typography>\r\n                {errorMessage && <Alert severity='error'>{errorMessage}</Alert>}\r\n                <form onSubmit={handleSubmit}>\r\n                    <Box sx={{ mt: 4 }}>\r\n                        <TextField\r\n                            required\r\n                            fullWidth\r\n                            name='password'\r\n                            type='password'\r\n                            label='New Password'\r\n                            value={password}\r\n                            onChange={handlePasswordChange}\r\n                        />\r\n                    </Box>\r\n                    <Box sx={{ mt: 4 }}>\r\n                        <TextField\r\n                            required\r\n                            fullWidth\r\n                            name='passwordConfirm'\r\n                            type='password'\r\n                            label='Confirm New Password'\r\n                            value={passwordConfirm}\r\n                            onChange={handlePasswordConfirmChange}\r\n                        />\r\n                    </Box>\r\n                    <Box sx={{ mt: 4 }}>\r\n                        <Button\r\n                            type='submit'\r\n                            fullWidth\r\n                            variant='contained'\r\n                            color='primary'\r\n                        >\r\n                            Reset Password\r\n                        </Button>\r\n                    </Box>\r\n                </form>\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ResetPasswordPage;\r\n\r\n//todo add showpassword\r\n","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\customers\\EditAccountPage.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\products\\ProductsPage.tsx",["240","241"],[],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\r\n\r\nimport {\r\n    Grid,\r\n    IconButton,\r\n    Select,\r\n    MenuItem,\r\n    Box,\r\n    Container,\r\n    Pagination,\r\n} from \"@mui/material\";\r\n\r\nimport { ViewList, ViewModule } from \"@mui/icons-material\";\r\nimport { SelectChangeEvent } from \"@mui/material/Select\";\r\nimport FilterSidebar from \"layouts/Sidebar\";\r\n\r\nimport { getAllProducts } from \"features/products/productsThunk\";\r\nimport ProductCardItem from \"components/products/ProductCardItem\";\r\nimport { ProductType } from \"types/productTypes\";\r\nimport ProductListItem from \"components/products/ProductListItem\";\r\nimport { sortProducts } from \"features/products/productsSlice\";\r\n\r\nconst ProductPage = () => {\r\n    //Use hooks\r\n    const dispatch = useAppDispatch();\r\n    // get data from store\r\n    const { products, pagination, error } = useAppSelector(\r\n        (state) => state.productsR\r\n    );\r\n\r\n    const [layout, setLayout] = useState(\"cards\"); // set state for card or list laout\r\n    const [sortOption, setSortOption] = useState(\"default\"); // set state for sorting\r\n    const [productsPerPage, setProductsPerPage] = useState(\"4\"); // set state for nuber of pages on list\r\n    const [page, setPage] = useState(1); // set state to define page to send to backend\r\n\r\n    // TODO Find out how to prevent doble dispatch here\r\n    // dispatch page and products per page for initial render\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllProducts({ page: page, limit: parseInt(productsPerPage) })\r\n        );\r\n    }, [dispatch, page, productsPerPage]);\r\n\r\n    // change laout card/list\r\n    const handleLayoutChange = (newLayout: string) => {\r\n        setLayout(newLayout);\r\n    };\r\n\r\n    const handleSortOptionChange = (event: SelectChangeEvent) => {\r\n        const sortOption = event.target.value as string;\r\n        setSortOption(sortOption);\r\n        dispatch(sortProducts(sortOption));\r\n    };\r\n\r\n    const handleProductsPerPageChange = (event: SelectChangeEvent) => {\r\n        setProductsPerPage(event.target.value as string);\r\n    };\r\n\r\n    // TODO:  handle pagination and implement 'show more' functionality\r\n\r\n    return (\r\n        <Container maxWidth='xl'>\r\n            {/* Filtering section  */}\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={4} md={3} lg={3}>\r\n                    <Box\r\n                        border={1}\r\n                        borderColor='divider'\r\n                        borderRadius={1}\r\n                        p={1}\r\n                    >\r\n                        <FilterSidebar />\r\n                    </Box>\r\n                </Grid>\r\n\r\n                {/* Products and sorting section */}\r\n                <Grid item xs={12} sm={8} md={9} lg={9}>\r\n                    {/* Sorting and type of layout section */}\r\n                    <Box\r\n                        display='flex'\r\n                        justifyContent='space-between'\r\n                        alignItems='center'\r\n                        marginBottom={2}\r\n                        border={1}\r\n                        borderColor='divider'\r\n                        borderRadius={1}\r\n                        p={1}\r\n                    >\r\n                        <Box\r\n                            display='flex'\r\n                            justifyContent='space-between'\r\n                            alignItems='center'\r\n                        >\r\n                            <IconButton\r\n                                onClick={() => handleLayoutChange(\"list\")}\r\n                            >\r\n                                <ViewList />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                onClick={() => handleLayoutChange(\"cards\")}\r\n                            >\r\n                                <ViewModule />\r\n                            </IconButton>\r\n                        </Box>\r\n                        <Box\r\n                            display='flex'\r\n                            justifyContent='space-between'\r\n                            alignItems='center'\r\n                        >\r\n                            <Select\r\n                                value={sortOption}\r\n                                onChange={handleSortOptionChange}\r\n                                sx={{\r\n                                    minWidth: \"250px\", // Set the width of the input field\r\n                                    height: \"40px\", // Set the height of the input field\r\n                                    marginRight: \"16px\", // Set the spacing between the input fields\r\n                                }}\r\n                            >\r\n                                <MenuItem value='default'>Default</MenuItem>\r\n                                <MenuItem value='price_low_to_high'>\r\n                                    Price: Low to High\r\n                                </MenuItem>\r\n                                <MenuItem value='price_high_to_low'>\r\n                                    Price: High to Low\r\n                                </MenuItem>\r\n                                {/* Add more sorting options if needed */}\r\n                            </Select>\r\n\r\n                            <Select\r\n                                value={productsPerPage}\r\n                                onChange={handleProductsPerPageChange}\r\n                                sx={{\r\n                                    minWidth: \"50px\", // Set the width of the input field\r\n                                    height: \"40px\", // Set the height of the input field\r\n                                }}\r\n                            >\r\n                                <MenuItem value={4}>4</MenuItem>\r\n                                <MenuItem value={10}>10</MenuItem>\r\n                                <MenuItem value={20}>20</MenuItem>\r\n                                {/* Add more items per page options if needed */}\r\n                            </Select>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box\r\n                        border={1}\r\n                        borderColor='divider'\r\n                        borderRadius={1}\r\n                        p={1}\r\n                    >\r\n                        {layout === \"cards\" && (\r\n                            <Grid container spacing={2}>\r\n                                {products &&\r\n                                    products.map((product: ProductType) => (\r\n                                        <Grid\r\n                                            item\r\n                                            key={product._id}\r\n                                            xs={12}\r\n                                            sm={6}\r\n                                            md={4}\r\n                                            lg={3}\r\n                                        >\r\n                                            <ProductCardItem\r\n                                                product={product}\r\n                                            />\r\n                                        </Grid>\r\n                                    ))}\r\n                            </Grid>\r\n                        )}\r\n\r\n                        {layout === \"list\" && (\r\n                            <Grid container spacing={2}>\r\n                                {products &&\r\n                                    products.map((product: ProductType) => (\r\n                                        <Grid item key={product._id} xs={12}>\r\n                                            <ProductListItem\r\n                                                product={product}\r\n                                            />\r\n                                        </Grid>\r\n                                    ))}\r\n                            </Grid>\r\n                        )}\r\n                        {/* TODO: Add 'show more' button and pagination controls */}\r\n                        {/* <button onClick={() => setPage(page + 1)}>\r\n                            Show More\r\n                        </button> */}\r\n\r\n                        <Grid\r\n                            item\r\n                            xs={12}\r\n                            sx={{\r\n                                marginTop: \"16px\",\r\n                            }}\r\n                        >\r\n                            <Box\r\n                                display='flex'\r\n                                flexDirection='column'\r\n                                alignItems='center'\r\n                                borderTop={1}\r\n                                borderColor='rgba(0, 0, 0, 0.1)'\r\n                                pt={2}\r\n                                sx={{\r\n                                    width: \"60%\",\r\n                                    margin: \"auto\",\r\n                                }}\r\n                            >\r\n                                <Pagination\r\n                                    count={pagination.totalPages}\r\n                                    page={page}\r\n                                    onChange={(event, value) => setPage(value)}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ProductPage;\r\n\r\n// TODO Findout about Helmet package and how to use\r\n","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\layouts\\Sidebar.tsx",["242"],[],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\r\n\r\nimport {\r\n    Box,\r\n    TextField,\r\n    Typography,\r\n    FormControlLabel,\r\n    Checkbox,\r\n    Grid,\r\n    Slider,\r\n    Button,\r\n} from \"@mui/material\";\r\nimport { CategoryType } from \"../types/categoryType\";\r\nimport { BrandType } from \"types/brandTypes\";\r\nimport { getAllBrands } from \"features/brands/brandThunk\";\r\nimport { getAllCategories } from \"features/categories/categoryThunk\";\r\nimport { getFilteredProducts } from \"features/products/productsThunk\";\r\n\r\nconst FilterSidebar = () => {\r\n    //use hooks\r\n    const dispatch = useAppDispatch();\r\n    // get data from store\r\n    const { brands } = useAppSelector((state) => state.brandsR);\r\n    const { categories } = useAppSelector((state) => state.categoriesR);\r\n    const { products } = useAppSelector((state) => state.productsR);\r\n\r\n    // Initialize the price range state with the minimum and maximum prices of all products\r\n    //reduce is used to reduce the array to a single value. This method does not change the original array.\r\n    //reduce takes a callback function as its first argument. This function is executed on each element of the array.The result of the function is stored in an accumulator (in this case, min), which is then used as a parameter in the next execution of the function.\r\n    //The callback function here takes two arguments: min and product. min is the accumulator, and product is the current element in the array. This function is executed on every product in the products array.\r\n    //Inside the callback function, Math.min(min, product.price) is used to compare the current minimum price (min) and the price of the current product (product.price).it's comparing the current smallest price found so far with the price of the current product, and returning the smaller of the two.\r\n    //Infinity is the initial value of the min accumulator. This is the second argument to the reduce method. It's a way to ensure that any price from the products array will be less than the initial value, as Infinity is the largest possible number in JavaScript.\r\n    // Summary: Go through each product in the products array, and for each one, compare its price to the current smallest price found. If this product's price is smaller, then it becomes the new smallest price. Continue this until we've checked every product, and give me the smallest price found.\" This smallest price is then stored in the minPrice constant.\r\n    // const minPrice = products.reduce(\r\n    //     (min, product) => Math.min(min, product.price),\r\n    //     Infinity\r\n    // );\r\n    // const maxPrice = products.reduce(\r\n    //     (max, product) => Math.max(max, product.price),\r\n    //     0\r\n    // );\r\n\r\n    const [priceRange, setPriceRange] = useState({\r\n        min: 0,\r\n        max: 300,\r\n    });\r\n    const [sliderRange, setSliderRange] = useState([0, 300]);\r\n\r\n    // Add state to save array of checked categories and brands\r\n    const [checkedCategories, setCheckedCategories] = useState<string[]>([]);\r\n    const [checkedBrands, setCheckedBrands] = useState<string[]>([]);\r\n\r\n    // Update the state when the price range inputs change\r\n    const handlePriceRangeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newPriceRange = {\r\n            ...priceRange,\r\n            [e.target.name]: e.target.value,\r\n        };\r\n        setPriceRange(newPriceRange);\r\n\r\n        // If both min and max fields have a value, update the slider\r\n        if (newPriceRange.min !== 0 && newPriceRange.max !== 300) {\r\n            setSliderRange([\r\n                Number(newPriceRange.min),\r\n                Number(newPriceRange.max),\r\n            ]);\r\n        }\r\n    };\r\n    //It takes two parameters: an underscore _, and newValue. The underscore _ is a convention in JavaScript and TypeScript meaning that the variable is not going to be used in the function body, and you don't care about its value. In this case, the first parameter of the onChange callback of the Slider component is the event, but we don't need it, so we ignore it with _.\r\n    //newValue: number | number[] means that newValue can be either a single number or an array of numbers. In this case, since we're working with a range slider, newValue will always be an array of two numbers: the minimum and maximum of the range.\r\n    const handleSliderRangeChange = (_: any, newValue: number | number[]) => {\r\n        setSliderRange(newValue as number[]);\r\n        setPriceRange({\r\n            min: (newValue as number[])[0],\r\n            max: (newValue as number[])[1],\r\n        });\r\n    };\r\n    // Reset all filters\r\n    const handleReset = () => {\r\n        // Reset price range\r\n        setPriceRange({ min: 0, max: 300 });\r\n        setSliderRange([0, 300]);\r\n\r\n        // Reset categories\r\n        setCheckedCategories([]);\r\n\r\n        // Reset brands\r\n        setCheckedBrands([]);\r\n    };\r\n\r\n    //dispatch action to get brand\r\n    useEffect(() => {\r\n        dispatch(getAllBrands());\r\n    }, [dispatch]);\r\n    //dispatch action to get categories\r\n    useEffect(() => {\r\n        dispatch(getAllCategories());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getFilteredProducts({\r\n                priceRange: [priceRange.min, priceRange.max], // Transform to array\r\n                checkedCategories,\r\n                checkedBrands,\r\n            })\r\n        );\r\n    }, [checkedBrands, checkedCategories, dispatch, priceRange]);\r\n\r\n    //Save checked categories in state\r\n    const handleCheckedCategories = (categoryId: string) => {\r\n        //What ever is already in previous state\r\n        setCheckedCategories((prevCategories) => {\r\n            // Check if the category is already in the array\r\n            // If it is, remove it (uncheck the category)\r\n            //includes() method  is used to check if a certain value exists in an array or not. It returns true if the value is found in the array, and false otherwise.\r\n            if (prevCategories.includes(categoryId)) {\r\n                return prevCategories.filter((id) => id !== categoryId);\r\n            }\r\n            // If it's not in the array, add it (check the category)\r\n            else {\r\n                return [...prevCategories, categoryId];\r\n            }\r\n        });\r\n    };\r\n\r\n    // Save checked Barnds in state\r\n\r\n    const handleChekedBrands = (brandId: string) => {\r\n        // Whatever we have in previous state\r\n        setCheckedBrands((previousBrands) => {\r\n            if (previousBrands.includes(brandId)) {\r\n                return previousBrands.filter((id) => id !== brandId);\r\n            } else {\r\n                return [...previousBrands, brandId];\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={12} sx={{ padding: \"16px\" }}>\r\n            {/* Price section */}\r\n            <Grid item xs={12}>\r\n                <Typography variant='h6'>Price</Typography>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6}>\r\n                        <TextField\r\n                            name='min'\r\n                            label='Min'\r\n                            type='number'\r\n                            value={priceRange.min}\r\n                            onChange={handlePriceRangeChange}\r\n                            variant='outlined'\r\n                            size='small'\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <TextField\r\n                            name='max'\r\n                            label='Max'\r\n                            type='number'\r\n                            value={priceRange.max}\r\n                            onChange={handlePriceRangeChange}\r\n                            variant='outlined'\r\n                            size='small'\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Box mt={2}>\r\n                    <Slider\r\n                        value={sliderRange}\r\n                        onChange={handleSliderRangeChange}\r\n                        valueLabelDisplay='auto'\r\n                        min={0}\r\n                        max={300}\r\n                    />\r\n                </Box>\r\n            </Grid>\r\n\r\n            {/* Categories section */}\r\n            <Grid item xs={12}>\r\n                <Typography variant='h6'>Category</Typography>\r\n                <Grid container direction='column'>\r\n                    {categories.map((category: CategoryType) => (\r\n                        <FormControlLabel\r\n                            key={category._id}\r\n                            control={\r\n                                // The checked prop determines whether the checkbox is checked or not. If the value you pass to checked is true, the checkbox will be checked; if it's false, the checkbox will be unchecked.\r\n                                //checkedCategories.includes(category._id): checking if the current category's ID is in the checkedCategories array. If the category's ID is in the array, that means the user has checked that checkbox, so checkedCategories.includes(category._id) will be true and the checkbox will be checked. If the category's ID is not in the array, that means the user has not checked that checkbox, so checkedCategories.includes(category._id) will be false and the checkbox will be unchecked.\r\n                                <Checkbox\r\n                                    checked={checkedCategories.includes(\r\n                                        category._id\r\n                                    )}\r\n                                />\r\n                            }\r\n                            label={`${category.name} (${category.productCount})`}\r\n                            onChange={() => {\r\n                                handleCheckedCategories(category._id);\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {/* Brands section */}\r\n            <Grid item xs={12}>\r\n                <Typography variant='h6'>Brand</Typography>\r\n                <Grid container direction='column'>\r\n                    {brands.map((brand: BrandType) => (\r\n                        <FormControlLabel\r\n                            key={brand._id}\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={checkedBrands.includes(brand._id)}\r\n                                />\r\n                            }\r\n                            label={`${brand.name} (${brand.productCount})`}\r\n                            onChange={() => {\r\n                                handleChekedBrands(brand._id);\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Button\r\n                    variant='outlined'\r\n                    color='primary'\r\n                    onClick={handleReset}\r\n                >\r\n                    Reset Filters\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default FilterSidebar;\r\n","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\products\\productsSlice.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\products\\productsThunk.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\products\\ProductCardItem.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\products\\ProductListItem.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\brands\\brandSlice.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\brands\\brandThunk.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\categories\\categorySlice.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\features\\categories\\categoryThunk.ts",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\common\\NoProductsFound.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\layouts\\SearchAndCartBar.tsx",["243"],[],"import React, { useState, ChangeEvent } from \"react\";\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    InputBase,\r\n    Badge,\r\n    IconButton,\r\n    Box,\r\n    styled,\r\n    Typography,\r\n    Paper,\r\n    List,\r\n    ClickAwayListener,\r\n} from \"@mui/material\";\r\n\r\nimport Popper from \"@mui/material/Popper\";\r\nimport ShoppingCartIcon from \"@mui/icons-material/ShoppingCart\";\r\nimport PhoneIcon from \"@mui/icons-material/Phone\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\r\nimport { getSerchedProducts } from \"features/products/productsThunk\";\r\nimport ProductDropdownItem from \"components/products/ProductSerchListItem\";\r\nimport { resetSerchInput } from \"features/products/productsSlice\";\r\n\r\n// Define a custom styled InputBase component\r\nconst CustomInputBase = styled(InputBase)(({ theme }) => ({\r\n    backgroundColor: theme.palette.background.paper,\r\n    borderRadius: \"10px\",\r\n    position: \"relative\",\r\n    paddingLeft: \"1rem\",\r\n    paddingRight: \"1rem\",\r\n    width: \"100%\",\r\n    // height: \"45px\",\r\n}));\r\n\r\nconst SerchAndCartBar = () => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { searchResults, success } = useAppSelector(\r\n        (state) => state.productsR\r\n    );\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    // to handle dropdown be open. If true it will be open but inittialy by defalt it false\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleSearch = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const query = event.target.value;\r\n        setSearchQuery(query);\r\n        setAnchorEl(event.currentTarget);\r\n        if (query.length > 0) {\r\n            dispatch(getSerchedProducts(query));\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n        setSearchQuery(\"\");\r\n        dispatch(resetSerchInput());\r\n    };\r\n    return (\r\n        <AppBar\r\n            position='static'\r\n            color='default'\r\n            sx={{ paddingY: \"12px\", marginBottom: \"32px\" }}\r\n        >\r\n            <Toolbar style={{ width: \"70%\", margin: \"auto\" }}>\r\n                <Box display='flex' justifyContent='flex-start' flexGrow={1}>\r\n                    <Typography variant='h4' component='h1'>\r\n                        Your Brand\r\n                    </Typography>\r\n                </Box>\r\n                <ClickAwayListener onClickAway={handleClose}>\r\n                    <Box display='flex' flexGrow={3}>\r\n                        <CustomInputBase\r\n                            placeholder='Search…'\r\n                            inputProps={{ \"aria-label\": \"search\" }}\r\n                            onChange={handleSearch}\r\n                            endAdornment={<SearchIcon />}\r\n                            value={searchQuery}\r\n                        />\r\n                        <Popper\r\n                            open={open}\r\n                            anchorEl={anchorEl}\r\n                            placement='bottom'\r\n                        >\r\n                            <Paper\r\n                                sx={{\r\n                                    backgroundColor: \"background.paper\",\r\n                                    border: \"1px solid\",\r\n                                    borderColor: \"divider\",\r\n                                    maxHeight: \"200px\",\r\n                                    overflowY: \"auto\",\r\n                                }}\r\n                            >\r\n                                <List>\r\n                                    {searchResults.map((product) => (\r\n                                        <ProductDropdownItem\r\n                                            key={product._id}\r\n                                            product={product}\r\n                                        />\r\n                                    ))}\r\n                                    {searchResults.length === 0 && (\r\n                                        <Typography>\r\n                                            No products found\r\n                                        </Typography>\r\n                                    )}\r\n                                </List>\r\n                            </Paper>\r\n                        </Popper>\r\n                    </Box>\r\n                </ClickAwayListener>\r\n                <Box display='flex' justifyContent='flex-end' flexGrow={1}>\r\n                    <Typography variant='h6'>\r\n                        <PhoneIcon /> (123) 456-7890\r\n                    </Typography>\r\n                </Box>\r\n                <Box display='flex' justifyContent='flex-end' flexGrow={1}>\r\n                    <IconButton color='inherit'>\r\n                        <Badge badgeContent={4} color='error'>\r\n                            <ShoppingCartIcon />\r\n                        </Badge>\r\n                    </IconButton>\r\n                </Box>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default SerchAndCartBar;\r\n\r\n//TODO Adjust the size of proper to the size of serch input.\r\n//TODO Fix the way serch works, if type correct at once and then incorrect it will not show no products match\r\n","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\products\\ProductDetailsPage.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\products\\ProductSerchListItem.tsx",["244"],[],"import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Grid, CardMedia, Typography, Box } from \"@mui/material\";\r\nimport { ProductType } from \"types/productTypes\";\r\nimport { useAppDispatch } from \"redux/hooks\";\r\nimport { getSingleProduct } from \"features/products/productsThunk\";\r\n\r\ninterface ProductCardItemProps {\r\n    product: ProductType;\r\n}\r\n\r\nconst ProductDropdownItem: React.FC<ProductCardItemProps> = ({ product }) => {\r\n    const { name, price, images, slug, _id } = product;\r\n    const dispatch = useAppDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const handleProductClick = (id: string) => {\r\n        dispatch(getSingleProduct(id));\r\n        navigate(`/products/${slug}`);\r\n    };\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                cursor: \"pointer\",\r\n                padding: \"10px\",\r\n                \"&:hover\": {\r\n                    backgroundColor: \"lightgray\",\r\n                },\r\n            }}\r\n            onClick={() => {\r\n                handleProductClick(_id);\r\n            }}\r\n        >\r\n            <CardMedia\r\n                component='img'\r\n                alt={name}\r\n                height='50'\r\n                image={images[0]}\r\n                sx={{ marginRight: \"10px\" }}\r\n            />\r\n            <Typography variant='body1' noWrap>\r\n                {name}\r\n            </Typography>\r\n            <Typography variant='body2' sx={{ marginLeft: \"auto\" }}>\r\n                {price.toLocaleString(\"de-DE\", {\r\n                    style: \"currency\",\r\n                    currency: \"EUR\",\r\n                })}\r\n            </Typography>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ProductDropdownItem;\r\n\r\n//TODO update the render make picture small name and price one under one\r\n","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\routers\\LoginRoute.tsx",["245"],[],"import LoginPage from \"pages/customers/LoginPage\";\r\nimport React, { useState } from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\n\r\nimport { useAppSelector } from \"redux/hooks\";\r\n\r\nconst LoggedInRoute = () => {\r\n    const [isLoogedIn, setIsLoggedId] = useState(\r\n        useAppSelector((state) => state.customerR.isLoggedIn)\r\n    );\r\n\r\n    //Outlet: This is a component from react-router-dom v6. It's a placeholder component that renders the child route component. When this LoggedInRoute component is rendered by a parent Route component, the Outlet component will render the child Route component that matches the current location.\r\n    return isLoogedIn ? <Outlet /> : <LoginPage />;\r\n};\r\n\r\nexport default LoggedInRoute;\r\n","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\routers\\AdminRoute.tsx",["246"],[],"import React, { useState } from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\n\r\nimport LoginPage from \"pages/customers/LoginPage\";\r\n\r\nimport { useAppSelector } from \"redux/hooks\";\r\n\r\nconst AdminRoute = () => {\r\n    const [isAdmin, setIsAdmin] = useState(\r\n        useAppSelector((state) => state.customerR.isAdmin)\r\n    );\r\n    // Outlet: This is a component from react-router-dom v6. It's a placeholder component that renders the child route component. When this LoggedInRoute component is rendered by a parent Route component, the Outlet component will render the child Route component that matches the current location.\r\n    return isAdmin ? <Outlet /> : <LoginPage />;\r\n};\r\n\r\nexport default AdminRoute;\r\n","C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\admin\\AdminSidebar.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\components\\admin\\AdminProductListItem.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\adminDashbord\\AdminProductPage.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\adminDashbord\\AdminCustomerPage.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\adminDashbord\\AdminOrdersPage.tsx",[],[],"C:\\OneDrive\\Dev\\github\\int-fs7-fullstack-project\\client\\src\\pages\\adminDashbord\\AdminProductCreatePage.tsx",[],[],{"ruleId":"247","severity":1,"message":"248","line":2,"column":17,"nodeType":"249","messageId":"250","endLine":2,"endColumn":26},{"ruleId":"247","severity":1,"message":"251","line":24,"column":11,"nodeType":"249","messageId":"250","endLine":24,"endColumn":19},{"ruleId":"247","severity":1,"message":"252","line":38,"column":13,"nodeType":"249","messageId":"250","endLine":38,"endColumn":20},{"ruleId":"247","severity":1,"message":"253","line":38,"column":22,"nodeType":"249","messageId":"250","endLine":38,"endColumn":27},{"ruleId":"247","severity":1,"message":"254","line":38,"column":29,"nodeType":"249","messageId":"250","endLine":38,"endColumn":36},{"ruleId":"247","severity":1,"message":"255","line":1,"column":38,"nodeType":"249","messageId":"250","endLine":1,"endColumn":44},{"ruleId":"247","severity":1,"message":"253","line":28,"column":35,"nodeType":"249","messageId":"250","endLine":28,"endColumn":40},{"ruleId":"247","severity":1,"message":"256","line":27,"column":13,"nodeType":"249","messageId":"250","endLine":27,"endColumn":21},{"ruleId":"247","severity":1,"message":"254","line":40,"column":28,"nodeType":"249","messageId":"250","endLine":40,"endColumn":35},{"ruleId":"247","severity":1,"message":"257","line":3,"column":10,"nodeType":"249","messageId":"250","endLine":3,"endColumn":14},{"ruleId":"247","severity":1,"message":"258","line":8,"column":24,"nodeType":"249","messageId":"250","endLine":8,"endColumn":37},{"ruleId":"247","severity":1,"message":"259","line":9,"column":21,"nodeType":"249","messageId":"250","endLine":9,"endColumn":31},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'navigate' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'success' is assigned a value but never used.","'useRef' is defined but never used.","'products' is assigned a value but never used.","'Grid' is defined but never used.","'setIsLoggedId' is assigned a value but never used.","'setIsAdmin' is assigned a value but never used."]